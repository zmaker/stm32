
PST6-Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004714  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800492c  0800492c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004934  08004934  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800493c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  080049ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080049ac  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d61b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c48  00000000  00000000  0002d6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a67  00000000  00000000  000308e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccc5  00000000  00000000  00051347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd616  00000000  00000000  0005e00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  0012b674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800488c 	.word	0x0800488c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800488c 	.word	0x0800488c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb06 	bl	8000b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f831 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f925 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8f3 	bl	8000780 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800059a:	f000 f88d 	bl	80006b8 <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t val;
	  HAL_ADC_Start(&hadc1);
 800059e:	4812      	ldr	r0, [pc, #72]	; (80005e8 <main+0x64>)
 80005a0:	f000 fea4 	bl	80012ec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005a8:	480f      	ldr	r0, [pc, #60]	; (80005e8 <main+0x64>)
 80005aa:	f000 ff02 	bl	80013b2 <HAL_ADC_PollForConversion>
	  val = HAL_ADC_GetValue(&hadc1);
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <main+0x64>)
 80005b0:	f000 ff8e 	bl	80014d0 <HAL_ADC_GetValue>
 80005b4:	4603      	mov	r3, r0
 80005b6:	82fb      	strh	r3, [r7, #22]

	  char msg[20];
	  sprintf(msg, "adc: %d \n", val);
 80005b8:	8afa      	ldrh	r2, [r7, #22]
 80005ba:	463b      	mov	r3, r7
 80005bc:	490b      	ldr	r1, [pc, #44]	; (80005ec <main+0x68>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fcf6 	bl	8003fb0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe02 	bl	80001d0 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4639      	mov	r1, r7
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <main+0x6c>)
 80005d8:	f003 f848 	bl	800366c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e0:	f000 fb50 	bl	8000c84 <HAL_Delay>
  {
 80005e4:	e7db      	b.n	800059e <main+0x1a>
 80005e6:	bf00      	nop
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	080048a4 	.word	0x080048a4
 80005f0:	200000f0 	.word	0x200000f0

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	; 0x58
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fccc 	bl	8003fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061a:	f001 fe53 	bl	80022c4 <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000624:	f000 f926 	bl	8000874 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000628:	f001 fe2e 	bl	8002288 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <SystemClock_Config+0xc0>)
 800062e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <SystemClock_Config+0xc0>)
 8000634:	f023 0318 	bic.w	r3, r3, #24
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800063c:	2314      	movs	r3, #20
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000654:	2301      	movs	r3, #1
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000660:	2307      	movs	r3, #7
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fe7d 	bl	8002370 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800067c:	f000 f8fa 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2303      	movs	r3, #3
 8000686:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fa7d 	bl	8002b98 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a4:	f000 f8e6 	bl	8000874 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a8:	f002 fe90 	bl	80033cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ac:	bf00      	nop
 80006ae:	3758      	adds	r7, #88	; 0x58
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006d0:	4a29      	ldr	r2, [pc, #164]	; (8000778 <MX_ADC1_Init+0xc0>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000700:	2201      	movs	r2, #1
 8000702:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_ADC1_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_ADC1_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000722:	2200      	movs	r2, #0
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000730:	f000 fc94 	bl	800105c <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800073a:	f000 f89b 	bl	8000874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_ADC1_Init+0xc4>)
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2306      	movs	r3, #6
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074a:	237f      	movs	r3, #127	; 0x7f
 800074c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074e:	2304      	movs	r3, #4
 8000750:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_ADC1_Init+0xbc>)
 800075c:	f000 fec6 	bl	80014ec <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000766:	f000 f885 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000008c 	.word	0x2000008c
 8000778:	50040000 	.word	0x50040000
 800077c:	19200040 	.word	0x19200040

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007c4:	f002 ff04 	bl	80035d0 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f851 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000f0 	.word	0x200000f0
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_GPIO_Init+0x8c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_GPIO_Init+0x8c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_GPIO_Init+0x8c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <MX_GPIO_Init+0x8c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_GPIO_Init+0x8c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_GPIO_Init+0x8c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <MX_GPIO_Init+0x8c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_GPIO_Init+0x8c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <MX_GPIO_Init+0x90>)
 8000844:	f001 fd08 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000848:	2308      	movs	r3, #8
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_GPIO_Init+0x90>)
 8000860:	f001 fb90 	bl	8001f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_MspInit+0x44>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6613      	str	r3, [r2, #96]	; 0x60
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6593      	str	r3, [r2, #88]	; 0x58
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09e      	sub	sp, #120	; 0x78
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	2254      	movs	r2, #84	; 0x54
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fb59 	bl	8003fa0 <memset>
  if(hadc->Instance==ADC1)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0xc0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d143      	bne.n	8000980 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000902:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000904:	2301      	movs	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800090c:	2310      	movs	r3, #16
 800090e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000910:	2307      	movs	r3, #7
 8000912:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800091c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fb5a 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000932:	f7ff ff9f 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_ADC_MspInit+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <HAL_ADC_MspInit+0xc4>)
 800093c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_ADC_MspInit+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_ADC_MspInit+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_ADC_MspInit+0xc4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_ADC_MspInit+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000966:	2302      	movs	r3, #2
 8000968:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800096a:	230b      	movs	r3, #11
 800096c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f001 fb02 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3778      	adds	r7, #120	; 0x78
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	50040000 	.word	0x50040000
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09e      	sub	sp, #120	; 0x78
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	2254      	movs	r2, #84	; 0x54
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 faf5 	bl	8003fa0 <memset>
  if(huart->Instance==USART2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a28      	ldr	r2, [pc, #160]	; (8000a5c <HAL_UART_MspInit+0xcc>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d148      	bne.n	8000a52 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fb07 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f7ff ff4c 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e6:	6593      	str	r3, [r2, #88]	; 0x58
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f001 faab 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a40:	2303      	movs	r3, #3
 8000a42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f001 fa99 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3778      	adds	r7, #120	; 0x78
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40021000 	.word	0x40021000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f8c8 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f003 fa30 	bl	8003f4c <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20010000 	.word	0x20010000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	20000174 	.word	0x20000174
 8000b20:	20000190 	.word	0x20000190

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff ffea 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f003 f9ef 	bl	8003f58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f7ff fd03 	bl	8000584 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b8c:	0800493c 	.word	0x0800493c
  ldr r2, =_sbss
 8000b90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b94:	2000018c 	.word	0x2000018c

08000b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_IRQHandler>

08000b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f001 f9b9 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f80e 	bl	8000bcc <HAL_InitTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	e001      	b.n	8000bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bbc:	f7ff fe60 	bl	8000880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d023      	beq.n	8000c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_InitTick+0x70>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_InitTick+0x6c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f9b7 	bl	8001f6a <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10f      	bne.n	8000c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d809      	bhi.n	8000c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	f001 f98f 	bl	8001f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_InitTick+0x74>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e004      	b.n	8000c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e001      	b.n	8000c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000178 	.word	0x20000178

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000178 	.word	0x20000178

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008

08000ccc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3360      	adds	r3, #96	; 0x60
 8000d46:	461a      	mov	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <LL_ADC_SetOffset+0x44>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	4313      	orrs	r3, r2
 8000d64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	03fff000 	.word	0x03fff000

08000d7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3360      	adds	r3, #96	; 0x60
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3360      	adds	r3, #96	; 0x60
 8000db8:	461a      	mov	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dd2:	bf00      	nop
 8000dd4:	371c      	adds	r7, #28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3330      	adds	r3, #48	; 0x30
 8000e14:	461a      	mov	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	f003 030c 	and.w	r3, r3, #12
 8000e20:	4413      	add	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	211f      	movs	r1, #31
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	401a      	ands	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0e9b      	lsrs	r3, r3, #26
 8000e3c:	f003 011f 	and.w	r1, r3, #31
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3314      	adds	r3, #20
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	0e5b      	lsrs	r3, r3, #25
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	0d1b      	lsrs	r3, r3, #20
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	2107      	movs	r1, #7
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	401a      	ands	r2, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	0d1b      	lsrs	r3, r3, #20
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ea6:	bf00      	nop
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0318 	and.w	r3, r3, #24
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ed8:	40d9      	lsrs	r1, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	400b      	ands	r3, r1
 8000ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	0007ffff 	.word	0x0007ffff

08000efc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6093      	str	r3, [r2, #8]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f34:	d101      	bne.n	8000f3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f84:	d101      	bne.n	8000f8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <LL_ADC_IsEnabled+0x18>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <LL_ADC_IsEnabled+0x1a>
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ff6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ffa:	f043 0204 	orr.w	r2, r3, #4
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b04      	cmp	r3, #4
 8001020:	d101      	bne.n	8001026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b08      	cmp	r3, #8
 8001046:	d101      	bne.n	800104c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e12c      	b.n	80012d0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fc1f 	bl	80008c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff3f 	bl	8000f20 <LL_ADC_IsDeepPowerDownEnabled>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff25 	bl	8000efc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff5a 	bl	8000f70 <LL_ADC_IsInternalRegulatorEnabled>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d115      	bne.n	80010ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff3e 	bl	8000f48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010cc:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <HAL_ADC_Init+0x27c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	099b      	lsrs	r3, r3, #6
 80010d2:	4a82      	ldr	r2, [pc, #520]	; (80012dc <HAL_ADC_Init+0x280>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	099b      	lsrs	r3, r3, #6
 80010da:	3301      	adds	r3, #1
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e0:	e002      	b.n	80010e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff3c 	bl	8000f70 <LL_ADC_IsInternalRegulatorEnabled>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10d      	bne.n	800111a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001102:	f043 0210 	orr.w	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff75 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001124:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 80c5 	bne.w	80012be <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 80c1 	bne.w	80012be <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001144:	f043 0202 	orr.w	r2, r3, #2
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff35 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10b      	bne.n	8001174 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800115c:	4860      	ldr	r0, [pc, #384]	; (80012e0 <HAL_ADC_Init+0x284>)
 800115e:	f7ff ff2f 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4619      	mov	r1, r3
 800116e:	485d      	ldr	r0, [pc, #372]	; (80012e4 <HAL_ADC_Init+0x288>)
 8001170:	f7ff fdac 	bl	8000ccc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e5b      	ldrb	r3, [r3, #25]
 8001178:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800117e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001184:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800118a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d106      	bne.n	80011b0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	3b01      	subs	r3, #1
 80011a8:	045b      	lsls	r3, r3, #17
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <HAL_ADC_Init+0x28c>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	430b      	orrs	r3, r1
 80011de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff12 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 80011ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff1f 	bl	8001034 <LL_ADC_INJ_IsConversionOngoing>
 80011f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d13d      	bne.n	800127a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d13a      	bne.n	800127a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001208:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001210:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001220:	f023 0302 	bic.w	r3, r3, #2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	69b9      	ldr	r1, [r7, #24]
 800122a:	430b      	orrs	r3, r1
 800122c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001234:	2b01      	cmp	r3, #1
 8001236:	d118      	bne.n	800126a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001242:	f023 0304 	bic.w	r3, r3, #4
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800124e:	4311      	orrs	r1, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001254:	4311      	orrs	r1, r2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800125a:	430a      	orrs	r2, r1
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	e007      	b.n	800127a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10c      	bne.n	800129c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f023 010f 	bic.w	r1, r3, #15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
 800129a:	e007      	b.n	80012ac <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020f 	bic.w	r2, r2, #15
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	f023 0303 	bic.w	r3, r3, #3
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
 80012bc:	e007      	b.n	80012ce <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	053e2d63 	.word	0x053e2d63
 80012e0:	50040000 	.word	0x50040000
 80012e4:	50040300 	.word	0x50040300
 80012e8:	fff0c007 	.word	0xfff0c007

080012ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe88 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d14f      	bne.n	80013a4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Start+0x26>
 800130e:	2302      	movs	r3, #2
 8001310:	e04b      	b.n	80013aa <HAL_ADC_Start+0xbe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fcc6 	bl	8001cac <ADC_Enable>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d137      	bne.n	800139a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134a:	d106      	bne.n	800135a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	f023 0206 	bic.w	r2, r3, #6
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	659a      	str	r2, [r3, #88]	; 0x58
 8001358:	e002      	b.n	8001360 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	221c      	movs	r2, #28
 8001366:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe27 	bl	8000fe6 <LL_ADC_REG_StartConversion>
 8001398:	e006      	b.n	80013a8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013a2:	e001      	b.n	80013a8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013a4:	2302      	movs	r3, #2
 80013a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d102      	bne.n	80013ca <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80013c4:	2308      	movs	r3, #8
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e010      	b.n	80013ec <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013dc:	f043 0220 	orr.w	r2, r3, #32
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e06f      	b.n	80014c8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80013e8:	2304      	movs	r3, #4
 80013ea:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80013ec:	f7ff fc3e 	bl	8000c6c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013f2:	e021      	b.n	8001438 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013fa:	d01d      	beq.n	8001438 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80013fc:	f7ff fc36 	bl	8000c6c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d302      	bcc.n	8001412 <HAL_ADC_PollForConversion+0x60>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d112      	bne.n	8001438 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	f043 0204 	orr.w	r2, r3, #4
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e047      	b.n	80014c8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0d6      	beq.n	80013f4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fcc1 	bl	8000dde <LL_ADC_REG_IsTriggerSourceSWStart>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01c      	beq.n	800149c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7e5b      	ldrb	r3, [r3, #25]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d118      	bne.n	800149c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b08      	cmp	r3, #8
 8001476:	d111      	bne.n	800149c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d104      	bne.n	80014b4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2208      	movs	r2, #8
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e008      	b.n	80014c6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d103      	bne.n	80014c6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0b6      	sub	sp, #216	; 0xd8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_ADC_ConfigChannel+0x22>
 800150a:	2302      	movs	r3, #2
 800150c:	e3b9      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x796>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fd77 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 839e 	bne.w	8001c64 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d824      	bhi.n	800157a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	3b02      	subs	r3, #2
 8001536:	2b03      	cmp	r3, #3
 8001538:	d81b      	bhi.n	8001572 <HAL_ADC_ConfigChannel+0x86>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <HAL_ADC_ConfigChannel+0x54>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001559 	.word	0x08001559
 8001548:	08001561 	.word	0x08001561
 800154c:	08001569 	.word	0x08001569
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	220c      	movs	r2, #12
 8001554:	605a      	str	r2, [r3, #4]
          break;
 8001556:	e011      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2212      	movs	r2, #18
 800155c:	605a      	str	r2, [r3, #4]
          break;
 800155e:	e00d      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2218      	movs	r2, #24
 8001564:	605a      	str	r2, [r3, #4]
          break;
 8001566:	e009      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156e:	605a      	str	r2, [r3, #4]
          break;
 8001570:	e004      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2206      	movs	r2, #6
 8001576:	605a      	str	r2, [r3, #4]
          break;
 8001578:	e000      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800157a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	f7ff fc3b 	bl	8000e04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fd3b 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001598:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fd47 	bl	8001034 <LL_ADC_INJ_IsConversionOngoing>
 80015a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 81a6 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 81a1 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f7ff fc46 	bl	8000e5c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	08db      	lsrs	r3, r3, #3
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d00a      	beq.n	8001608 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001602:	f7ff fb97 	bl	8000d34 <LL_ADC_SetOffset>
 8001606:	e17b      	b.n	8001900 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fbb4 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x148>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fba9 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	0e9b      	lsrs	r3, r3, #26
 800162e:	f003 021f 	and.w	r2, r3, #31
 8001632:	e01e      	b.n	8001672 <HAL_ADC_ConfigChannel+0x186>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb9e 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800165a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001662:	2320      	movs	r3, #32
 8001664:	e004      	b.n	8001670 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_ADC_ConfigChannel+0x19e>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	e018      	b.n	80016bc <HAL_ADC_ConfigChannel+0x1d0>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800169e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80016ae:	2320      	movs	r3, #32
 80016b0:	e004      	b.n	80016bc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80016b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016bc:	429a      	cmp	r2, r3
 80016be:	d106      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fb6d 	bl	8000da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fb51 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10a      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb46 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	0e9b      	lsrs	r3, r3, #26
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	e01e      	b.n	8001738 <HAL_ADC_ConfigChannel+0x24c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2101      	movs	r1, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb3b 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001718:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001728:	2320      	movs	r3, #32
 800172a:	e004      	b.n	8001736 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800172c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x264>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0e9b      	lsrs	r3, r3, #26
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	e018      	b.n	8001782 <HAL_ADC_ConfigChannel+0x296>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800176c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001774:	2320      	movs	r3, #32
 8001776:	e004      	b.n	8001782 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001782:	429a      	cmp	r2, r3
 8001784:	d106      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fb0a 	bl	8000da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2102      	movs	r1, #2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff faee 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10a      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x2d4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fae3 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	f003 021f 	and.w	r2, r3, #31
 80017be:	e01e      	b.n	80017fe <HAL_ADC_ConfigChannel+0x312>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fad8 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80017ee:	2320      	movs	r3, #32
 80017f0:	e004      	b.n	80017fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80017f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x32a>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	e016      	b.n	8001844 <HAL_ADC_ConfigChannel+0x358>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800182a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800182e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001836:	2320      	movs	r3, #32
 8001838:	e004      	b.n	8001844 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800183a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001844:	429a      	cmp	r2, r3
 8001846:	d106      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	2102      	movs	r1, #2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff faa9 	bl	8000da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2103      	movs	r1, #3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fa8d 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10a      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x396>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2103      	movs	r1, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fa82 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	0e9b      	lsrs	r3, r3, #26
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	e017      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x3c6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2103      	movs	r1, #3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fa77 	bl	8000d7c <LL_ADC_GetOffsetChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800189a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800189c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800189e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80018a4:	2320      	movs	r3, #32
 80018a6:	e003      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80018a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d105      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x3de>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	e011      	b.n	80018ee <HAL_ADC_ConfigChannel+0x402>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80018e2:	2320      	movs	r3, #32
 80018e4:	e003      	b.n	80018ee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80018e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d106      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	2103      	movs	r1, #3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa54 	bl	8000da8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fb5b 	bl	8000fc0 <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 813f 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	461a      	mov	r2, r3
 8001920:	f7ff fac8 	bl	8000eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a8e      	ldr	r2, [pc, #568]	; (8001b64 <HAL_ADC_ConfigChannel+0x678>)
 800192a:	4293      	cmp	r3, r2
 800192c:	f040 8130 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10b      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x46c>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0e9b      	lsrs	r3, r3, #26
 8001946:	3301      	adds	r3, #1
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	2b09      	cmp	r3, #9
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e019      	b.n	800198c <HAL_ADC_ConfigChannel+0x4a0>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001968:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800196a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001970:	2320      	movs	r3, #32
 8001972:	e003      	b.n	800197c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2b09      	cmp	r3, #9
 8001984:	bf94      	ite	ls
 8001986:	2301      	movls	r3, #1
 8001988:	2300      	movhi	r3, #0
 800198a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800198c:	2b00      	cmp	r3, #0
 800198e:	d079      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x4c0>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	3301      	adds	r3, #1
 80019a4:	069b      	lsls	r3, r3, #26
 80019a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019aa:	e015      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x4ec>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80019be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	e003      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	069b      	lsls	r3, r3, #26
 80019d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x50c>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	3301      	adds	r3, #1
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	e017      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x53c>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a10:	2320      	movs	r3, #32
 8001a12:	e003      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	ea42 0103 	orr.w	r1, r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10a      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x562>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	051b      	lsls	r3, r3, #20
 8001a4c:	e018      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x594>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e003      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a80:	430b      	orrs	r3, r1
 8001a82:	e080      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d107      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x5b4>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	3301      	adds	r3, #1
 8001a98:	069b      	lsls	r3, r3, #26
 8001a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a9e:	e015      	b.n	8001acc <HAL_ADC_ConfigChannel+0x5e0>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e003      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	069b      	lsls	r3, r3, #26
 8001ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x600>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0e9b      	lsrs	r3, r3, #26
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	e017      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x630>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	61fb      	str	r3, [r7, #28]
  return result;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e003      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	ea42 0103 	orr.w	r1, r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10d      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x65c>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	3301      	adds	r3, #1
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b1e      	subs	r3, #30
 8001b40:	051b      	lsls	r3, r3, #20
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b46:	e01d      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x698>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	613b      	str	r3, [r7, #16]
  return result;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e005      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x684>
 8001b64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	f003 021f 	and.w	r2, r3, #31
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	051b      	lsls	r3, r3, #20
 8001b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b84:	430b      	orrs	r3, r1
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	6892      	ldr	r2, [r2, #8]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff f966 	bl	8000e5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_ADC_ConfigChannel+0x7a0>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d06c      	beq.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b9c:	483c      	ldr	r0, [pc, #240]	; (8001c90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b9e:	f7ff f8bb 	bl	8000d18 <LL_ADC_GetCommonPathInternalCh>
 8001ba2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a3a      	ldr	r2, [pc, #232]	; (8001c94 <HAL_ADC_ConfigChannel+0x7a8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d127      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d121      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a35      	ldr	r2, [pc, #212]	; (8001c98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d157      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bce:	4619      	mov	r1, r3
 8001bd0:	482f      	ldr	r0, [pc, #188]	; (8001c90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001bd2:	f7ff f88e 	bl	8000cf2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_ADC_ConfigChannel+0x7b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	4a30      	ldr	r2, [pc, #192]	; (8001ca0 <HAL_ADC_ConfigChannel+0x7b4>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bfe:	e03a      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d113      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x746>
 8001c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d12a      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4819      	ldr	r0, [pc, #100]	; (8001c90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c2c:	f7ff f861 	bl	8000cf2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c30:	e021      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d11c      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d116      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d111      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c5e:	f7ff f848 	bl	8000cf2 <LL_ADC_SetCommonPathInternalCh>
 8001c62:	e008      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	37d8      	adds	r7, #216	; 0xd8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	80080000 	.word	0x80080000
 8001c90:	50040300 	.word	0x50040300
 8001c94:	c7520000 	.word	0xc7520000
 8001c98:	50040000 	.word	0x50040000
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	053e2d63 	.word	0x053e2d63
 8001ca4:	cb840000 	.word	0xcb840000
 8001ca8:	80000001 	.word	0x80000001

08001cac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f97f 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d169      	bne.n	8001d9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <ADC_Enable+0xfc>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00d      	beq.n	8001cf2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e055      	b.n	8001d9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f94e 	bl	8000f98 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001cfc:	482b      	ldr	r0, [pc, #172]	; (8001dac <ADC_Enable+0x100>)
 8001cfe:	f7ff f80b 	bl	8000d18 <LL_ADC_GetCommonPathInternalCh>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <ADC_Enable+0x104>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <ADC_Enable+0x108>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d26:	e002      	b.n	8001d2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f9      	bne.n	8001d28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d34:	f7fe ff9a 	bl	8000c6c <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d3a:	e028      	b.n	8001d8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f93d 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d104      	bne.n	8001d56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f921 	bl	8000f98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d56:	f7fe ff89 	bl	8000c6c <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d914      	bls.n	8001d8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d00d      	beq.n	8001d8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e007      	b.n	8001d9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d1cf      	bne.n	8001d3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	8000003f 	.word	0x8000003f
 8001dac:	50040300 	.word	0x50040300
 8001db0:	20000000 	.word	0x20000000
 8001db4:	053e2d63 	.word	0x053e2d63

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff47 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff5c 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffb0 	bl	8001ed8 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e148      	b.n	8002226 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 813a 	beq.w	8002220 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d005      	beq.n	8001fc4 <HAL_GPIO_Init+0x40>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d130      	bne.n	8002026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f003 0201 	and.w	r2, r3, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d017      	beq.n	8002062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d123      	bne.n	80020b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	6939      	ldr	r1, [r7, #16]
 80020b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0203 	and.w	r2, r3, #3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8094 	beq.w	8002220 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f8:	4b52      	ldr	r3, [pc, #328]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fc:	4a51      	ldr	r2, [pc, #324]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6613      	str	r3, [r2, #96]	; 0x60
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002110:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <HAL_GPIO_Init+0x2c4>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1d4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a43      	ldr	r2, [pc, #268]	; (800224c <HAL_GPIO_Init+0x2c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1d0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a42      	ldr	r2, [pc, #264]	; (8002250 <HAL_GPIO_Init+0x2cc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1cc>
 800214c:	2302      	movs	r3, #2
 800214e:	e004      	b.n	800215a <HAL_GPIO_Init+0x1d6>
 8002150:	2307      	movs	r3, #7
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x1d6>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_GPIO_Init+0x1d6>
 8002158:	2300      	movs	r3, #0
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	f002 0203 	and.w	r2, r2, #3
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	4093      	lsls	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216a:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_GPIO_Init+0x2c4>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002178:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219c:	4a2d      	ldr	r2, [pc, #180]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aeaf 	bne.w	8001f94 <HAL_GPIO_Init+0x10>
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	48000400 	.word	0x48000400
 8002250:	48000800 	.word	0x48000800
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002274:	e002      	b.n	800227c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40007000 	.word	0x40007000

080022a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d2:	d130      	bne.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e0:	d038      	beq.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2232      	movs	r2, #50	; 0x32
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	3301      	adds	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002308:	e002      	b.n	8002310 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3b01      	subs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d102      	bne.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x60>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f2      	bne.n	800230a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	d110      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e00f      	b.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002342:	d007      	beq.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800234c:	4a05      	ldr	r2, [pc, #20]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002352:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000
 8002368:	20000000 	.word	0x20000000
 800236c:	431bde83 	.word	0x431bde83

08002370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	f000 bc02 	b.w	8002b88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002384:	4b96      	ldr	r3, [pc, #600]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238e:	4b94      	ldr	r3, [pc, #592]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80e4 	beq.w	800256e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_RCC_OscConfig+0x4c>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	f040 808b 	bne.w	80024ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	f040 8087 	bne.w	80024ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023bc:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_OscConfig+0x64>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e3d9      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	4b81      	ldr	r3, [pc, #516]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_RCC_OscConfig+0x7e>
 80023e4:	4b7e      	ldr	r3, [pc, #504]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ec:	e005      	b.n	80023fa <HAL_RCC_OscConfig+0x8a>
 80023ee:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d223      	bcs.n	8002446 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fd8c 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e3ba      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	496d      	ldr	r1, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002430:	4b6b      	ldr	r3, [pc, #428]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	4968      	ldr	r1, [pc, #416]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
 8002444:	e025      	b.n	8002492 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002446:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a65      	ldr	r2, [pc, #404]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4960      	ldr	r1, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002464:	4b5e      	ldr	r3, [pc, #376]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	495b      	ldr	r1, [pc, #364]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fd4c 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e37a      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002492:	f000 fc81 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4950      	ldr	r1, [pc, #320]	; (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	4a4e      	ldr	r2, [pc, #312]	; (80025e8 <HAL_RCC_OscConfig+0x278>)
 80024b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024b2:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <HAL_RCC_OscConfig+0x27c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fb88 	bl	8000bcc <HAL_InitTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d052      	beq.n	800256c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	e35e      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d032      	beq.n	8002538 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a42      	ldr	r2, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024de:	f7fe fbc5 	bl	8000c6c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e6:	f7fe fbc1 	bl	8000c6c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e347      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f8:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4930      	ldr	r1, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	492b      	ldr	r1, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
 8002536:	e01a      	b.n	800256e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002544:	f7fe fb92 	bl	8000c6c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800254c:	f7fe fb8e 	bl	8000c6c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e314      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1dc>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d073      	beq.n	8002662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x21c>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d10e      	bne.n	80025a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d10b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d063      	beq.n	8002660 <HAL_RCC_OscConfig+0x2f0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d15f      	bne.n	8002660 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e2f1      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d106      	bne.n	80025bc <HAL_RCC_OscConfig+0x24c>
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e025      	b.n	8002608 <HAL_RCC_OscConfig+0x298>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c4:	d114      	bne.n	80025f0 <HAL_RCC_OscConfig+0x280>
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a02      	ldr	r2, [pc, #8]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e013      	b.n	8002608 <HAL_RCC_OscConfig+0x298>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	080048b0 	.word	0x080048b0
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004
 80025f0:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a9f      	ldr	r2, [pc, #636]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b9d      	ldr	r3, [pc, #628]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a9c      	ldr	r2, [pc, #624]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fb2c 	bl	8000c6c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fb28 	bl	8000c6c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e2ae      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262a:	4b92      	ldr	r3, [pc, #584]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x2a8>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fb18 	bl	8000c6c <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fb14 	bl	8000c6c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e29a      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002652:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x2d0>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d060      	beq.n	8002730 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x310>
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d119      	bne.n	80026ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d116      	bne.n	80026ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002680:	4b7c      	ldr	r3, [pc, #496]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_OscConfig+0x328>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e277      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	4973      	ldr	r1, [pc, #460]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ac:	e040      	b.n	8002730 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d023      	beq.n	80026fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b6:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6e      	ldr	r2, [pc, #440]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe fad3 	bl	8000c6c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7fe facf 	bl	8000c6c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e255      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026dc:	4b65      	ldr	r3, [pc, #404]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b62      	ldr	r3, [pc, #392]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	495f      	ldr	r1, [pc, #380]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	e018      	b.n	8002730 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5c      	ldr	r2, [pc, #368]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe faaf 	bl	8000c6c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002712:	f7fe faab 	bl	8000c6c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e231      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d03c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01c      	beq.n	800277e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002744:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274a:	4a4a      	ldr	r2, [pc, #296]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fa8a 	bl	8000c6c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7fe fa86 	bl	8000c6c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e20c      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCC_OscConfig+0x3ec>
 800277c:	e01b      	b.n	80027b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277e:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002784:	4a3b      	ldr	r2, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe fa6d 	bl	8000c6c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002796:	f7fe fa69 	bl	8000c6c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1ef      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a8:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ef      	bne.n	8002796 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80a6 	beq.w	8002910 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	4a26      	ldr	r2, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	; 0x58
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d118      	bne.n	800282e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002808:	f7fe fa30 	bl	8000c6c <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002810:	f7fe fa2c 	bl	8000c6c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1b2      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_RCC_OscConfig+0x508>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d108      	bne.n	8002848 <HAL_RCC_OscConfig+0x4d8>
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002846:	e029      	b.n	800289c <HAL_RCC_OscConfig+0x52c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b05      	cmp	r3, #5
 800284e:	d115      	bne.n	800287c <HAL_RCC_OscConfig+0x50c>
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_RCC_OscConfig+0x504>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002870:	e014      	b.n	800289c <HAL_RCC_OscConfig+0x52c>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	40007000 	.word	0x40007000
 800287c:	4b9a      	ldr	r3, [pc, #616]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	4a99      	ldr	r2, [pc, #612]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800288c:	4b96      	ldr	r3, [pc, #600]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a95      	ldr	r2, [pc, #596]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe f9e2 	bl	8000c6c <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe f9de 	bl	8000c6c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e162      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ed      	beq.n	80028ac <HAL_RCC_OscConfig+0x53c>
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7fe f9cb 	bl	8000c6c <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe f9c7 	bl	8000c6c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e14b      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f0:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ed      	bne.n	80028da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fe:	7ffb      	ldrb	r3, [r7, #31]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002904:	4b78      	ldr	r3, [pc, #480]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	4a77      	ldr	r2, [pc, #476]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800290a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d03c      	beq.n	8002996 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01c      	beq.n	800295e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002924:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292a:	4a6f      	ldr	r2, [pc, #444]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe f99a 	bl	8000c6c <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800293c:	f7fe f996 	bl	8000c6c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e11c      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ef      	beq.n	800293c <HAL_RCC_OscConfig+0x5cc>
 800295c:	e01b      	b.n	8002996 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002964:	4a60      	ldr	r2, [pc, #384]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe f97d 	bl	8000c6c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002976:	f7fe f979 	bl	8000c6c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0ff      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002988:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 800298a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ef      	bne.n	8002976 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80f3 	beq.w	8002b86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f040 80c9 	bne.w	8002b3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029aa:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d12c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	3b01      	subs	r3, #1
 80029ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d123      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d11b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d113      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d109      	bne.n	8002a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d06b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d062      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a1e:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0ac      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a3a:	f7fe f917 	bl	8000c6c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe f913 	bl	8000c6c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e099      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_RCC_OscConfig+0x77c>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a70:	3a01      	subs	r2, #1
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	4311      	orrs	r1, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a7a:	0212      	lsls	r2, r2, #8
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a82:	0852      	lsrs	r2, r2, #1
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0552      	lsls	r2, r2, #21
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a8e:	0852      	lsrs	r2, r2, #1
 8002a90:	3a01      	subs	r2, #1
 8002a92:	0652      	lsls	r2, r2, #25
 8002a94:	4311      	orrs	r1, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a9a:	06d2      	lsls	r2, r2, #27
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	4912      	ldr	r1, [pc, #72]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002abc:	f7fe f8d6 	bl	8000c6c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe f8d2 	bl	8000c6c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e058      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_RCC_OscConfig+0x778>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae2:	e050      	b.n	8002b86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e04f      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d144      	bne.n	8002b86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b14:	f7fe f8aa 	bl	8000c6c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe f8a6 	bl	8000c6c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e02c      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x7ac>
 8002b3a:	e024      	b.n	8002b86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d01f      	beq.n	8002b82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe f88d 	bl	8000c6c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe f889 	bl	8000c6c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e00f      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	4905      	ldr	r1, [pc, #20]	; (8002b90 <HAL_RCC_OscConfig+0x820>)
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RCC_OscConfig+0x824>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60cb      	str	r3, [r1, #12]
 8002b80:	e001      	b.n	8002b86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	feeefffc 	.word	0xfeeefffc

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0e7      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d910      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4970      	ldr	r1, [pc, #448]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0cf      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d908      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4960      	ldr	r1, [pc, #384]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04c      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0a6      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e09a      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e086      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4943      	ldr	r1, [pc, #268]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fd fff4 	bl	8000c6c <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fd fff0 	bl	8000c6c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e06e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d208      	bcs.n	8002cde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	492b      	ldr	r1, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d210      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 0207 	bic.w	r2, r3, #7
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e036      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4918      	ldr	r1, [pc, #96]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4910      	ldr	r1, [pc, #64]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4c:	f000 f824 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	490b      	ldr	r1, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1f4>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1fc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd ff2b 	bl	8000bcc <HAL_InitTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	080048b0 	.word	0x080048b0
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d11e      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e004      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d134      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d003      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xac>
 8002e3c:	e005      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e40:	617b      	str	r3, [r7, #20]
      break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e46:	617b      	str	r3, [r7, #20]
      break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	fb03 f202 	mul.w	r2, r3, r2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	0e5b      	lsrs	r3, r3, #25
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	3301      	adds	r3, #1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e90:	69bb      	ldr	r3, [r7, #24]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	080048c8 	.word	0x080048c8
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	007a1200 	.word	0x007a1200

08002eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	080048c0 	.word	0x080048c0

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef8:	f7ff ffda 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	080048c0 	.word	0x080048c0

08002f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff f9b6 	bl	80022a8 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
 8002f3e:	e014      	b.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f58:	f7ff f9a6 	bl	80022a8 <HAL_PWREx_GetVoltageRange>
 8002f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f70:	d10b      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d919      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f7c:	d902      	bls.n	8002f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7e:	2302      	movs	r3, #2
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e013      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f84:	2301      	movs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e010      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d902      	bls.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f90:	2303      	movs	r3, #3
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e00a      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d102      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e004      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d101      	bne.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 0207 	bic.w	r2, r3, #7
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d031      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003004:	d01a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800300a:	d814      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003014:	d10f      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003016:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f9de 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003044:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	494e      	ldr	r1, [pc, #312]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 809e 	beq.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003072:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4b3a      	ldr	r3, [pc, #232]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a39      	ldr	r2, [pc, #228]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b0:	f7fd fddc 	bl	8000c6c <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fd fdd8 	bl	8000c6c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030cc:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d15a      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030de:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01e      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d019      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003106:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800310e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003126:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d016      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd fd98 	bl	8000c6c <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	e00b      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fd fd94 	bl	8000c6c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d902      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	74fb      	strb	r3, [r7, #19]
            break;
 8003156:	e006      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ec      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317a:	4904      	ldr	r1, [pc, #16]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7c7b      	ldrb	r3, [r7, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b8a      	ldr	r3, [pc, #552]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4a89      	ldr	r2, [pc, #548]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b6:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4980      	ldr	r1, [pc, #512]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d8:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	4978      	ldr	r1, [pc, #480]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031fa:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	496f      	ldr	r1, [pc, #444]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800321c:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	4967      	ldr	r1, [pc, #412]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800323e:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	495e      	ldr	r1, [pc, #376]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	4956      	ldr	r1, [pc, #344]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	494d      	ldr	r1, [pc, #308]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d028      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a4:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4945      	ldr	r1, [pc, #276]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c2:	d106      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a3f      	ldr	r2, [pc, #252]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ce:	60d3      	str	r3, [r2, #12]
 80032d0:	e011      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032da:	d10c      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f882 	bl	80033ec <RCCEx_PLLSAI1_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	492d      	ldr	r1, [pc, #180]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003320:	d106      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332c:	60d3      	str	r3, [r2, #12]
 800332e:	e011      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003338:	d10c      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f853 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01c      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	4916      	ldr	r1, [pc, #88]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337e:	d10c      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f830 	bl	80033ec <RCCEx_PLLSAI1_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	4904      	ldr	r1, [pc, #16]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6013      	str	r3, [r2, #0]
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000

080033ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fa:	4b74      	ldr	r3, [pc, #464]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d018      	beq.n	8003438 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003406:	4b71      	ldr	r3, [pc, #452]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
       ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800341e:	4b6b      	ldr	r3, [pc, #428]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
       ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d047      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e044      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d018      	beq.n	8003472 <RCCEx_PLLSAI1_Config+0x86>
 8003440:	2b03      	cmp	r3, #3
 8003442:	d825      	bhi.n	8003490 <RCCEx_PLLSAI1_Config+0xa4>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <RCCEx_PLLSAI1_Config+0x62>
 8003448:	2b02      	cmp	r3, #2
 800344a:	d009      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x74>
 800344c:	e020      	b.n	8003490 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11d      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345e:	e01a      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003460:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d116      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e013      	b.n	800349a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003472:	4b56      	ldr	r3, [pc, #344]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347e:	4b53      	ldr	r3, [pc, #332]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348e:	e006      	b.n	800349e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e004      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349e:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	430b      	orrs	r3, r1
 80034bc:	4943      	ldr	r1, [pc, #268]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d17c      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034c8:	4b40      	ldr	r3, [pc, #256]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3f      	ldr	r2, [pc, #252]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fd fbca 	bl	8000c6c <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034da:	e009      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034dc:	f7fd fbc6 	bl	8000c6c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	73fb      	strb	r3, [r7, #15]
        break;
 80034ee:	e005      	b.n	80034fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ef      	bne.n	80034dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d15f      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d110      	bne.n	800352a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003508:	4b30      	ldr	r3, [pc, #192]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6892      	ldr	r2, [r2, #8]
 8003518:	0211      	lsls	r1, r2, #8
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	06d2      	lsls	r2, r2, #27
 8003520:	430a      	orrs	r2, r1
 8003522:	492a      	ldr	r1, [pc, #168]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003524:	4313      	orrs	r3, r2
 8003526:	610b      	str	r3, [r1, #16]
 8003528:	e027      	b.n	800357a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d112      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b26      	ldr	r3, [pc, #152]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6912      	ldr	r2, [r2, #16]
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0552      	lsls	r2, r2, #21
 800354c:	430a      	orrs	r2, r1
 800354e:	491f      	ldr	r1, [pc, #124]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	610b      	str	r3, [r1, #16]
 8003554:	e011      	b.n	800357a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800355e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	0211      	lsls	r1, r2, #8
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6952      	ldr	r2, [r2, #20]
 800356c:	0852      	lsrs	r2, r2, #1
 800356e:	3a01      	subs	r2, #1
 8003570:	0652      	lsls	r2, r2, #25
 8003572:	430a      	orrs	r2, r1
 8003574:	4915      	ldr	r1, [pc, #84]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003584:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fd fb71 	bl	8000c6c <HAL_GetTick>
 800358a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358c:	e009      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358e:	f7fd fb6d 	bl	8000c6c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d902      	bls.n	80035a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	73fb      	strb	r3, [r7, #15]
          break;
 80035a0:	e005      	b.n	80035ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ef      	beq.n	800358e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e040      	b.n	8003664 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd f9cc 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8c0 	bl	8003794 <UART_SetConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e022      	b.n	8003664 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fae0 	bl	8003bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fb67 	bl	8003d30 <UART_CheckIdleState>
 8003662:	4603      	mov	r3, r0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003680:	2b20      	cmp	r3, #32
 8003682:	f040 8082 	bne.w	800378a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_UART_Transmit+0x26>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07a      	b.n	800378c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x38>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e073      	b.n	800378c <HAL_UART_Transmit+0x120>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2221      	movs	r2, #33	; 0x21
 80036b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ba:	f7fd fad7 	bl	8000c6c <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d8:	d108      	bne.n	80036ec <HAL_UART_Transmit+0x80>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	e003      	b.n	80036f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036fc:	e02d      	b.n	800375a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2180      	movs	r1, #128	; 0x80
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fb5a 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e039      	b.n	800378c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800372a:	b292      	uxth	r2, r2
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	3302      	adds	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e008      	b.n	8003748 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b292      	uxth	r2, r2
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3301      	adds	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1cb      	bne.n	80036fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2140      	movs	r1, #64	; 0x40
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fb26 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e005      	b.n	800378c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b08a      	sub	sp, #40	; 0x28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4bb4      	ldr	r3, [pc, #720]	; (8003a94 <UART_SetConfig+0x300>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4aa9      	ldr	r2, [pc, #676]	; (8003a98 <UART_SetConfig+0x304>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	4313      	orrs	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4aa0      	ldr	r2, [pc, #640]	; (8003a9c <UART_SetConfig+0x308>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d126      	bne.n	800386c <UART_SetConfig+0xd8>
 800381e:	4ba0      	ldr	r3, [pc, #640]	; (8003aa0 <UART_SetConfig+0x30c>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b03      	cmp	r3, #3
 800382a:	d81b      	bhi.n	8003864 <UART_SetConfig+0xd0>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <UART_SetConfig+0xa0>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003845 	.word	0x08003845
 8003838:	08003855 	.word	0x08003855
 800383c:	0800384d 	.word	0x0800384d
 8003840:	0800385d 	.word	0x0800385d
 8003844:	2301      	movs	r3, #1
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e080      	b.n	800394e <UART_SetConfig+0x1ba>
 800384c:	2302      	movs	r3, #2
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003852:	e07c      	b.n	800394e <UART_SetConfig+0x1ba>
 8003854:	2304      	movs	r3, #4
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385a:	e078      	b.n	800394e <UART_SetConfig+0x1ba>
 800385c:	2308      	movs	r3, #8
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e074      	b.n	800394e <UART_SetConfig+0x1ba>
 8003864:	2310      	movs	r3, #16
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e070      	b.n	800394e <UART_SetConfig+0x1ba>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a8c      	ldr	r2, [pc, #560]	; (8003aa4 <UART_SetConfig+0x310>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d138      	bne.n	80038e8 <UART_SetConfig+0x154>
 8003876:	4b8a      	ldr	r3, [pc, #552]	; (8003aa0 <UART_SetConfig+0x30c>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d82d      	bhi.n	80038e0 <UART_SetConfig+0x14c>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0xf8>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038c1 	.word	0x080038c1
 8003890:	080038e1 	.word	0x080038e1
 8003894:	080038e1 	.word	0x080038e1
 8003898:	080038e1 	.word	0x080038e1
 800389c:	080038d1 	.word	0x080038d1
 80038a0:	080038e1 	.word	0x080038e1
 80038a4:	080038e1 	.word	0x080038e1
 80038a8:	080038e1 	.word	0x080038e1
 80038ac:	080038c9 	.word	0x080038c9
 80038b0:	080038e1 	.word	0x080038e1
 80038b4:	080038e1 	.word	0x080038e1
 80038b8:	080038e1 	.word	0x080038e1
 80038bc:	080038d9 	.word	0x080038d9
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c6:	e042      	b.n	800394e <UART_SetConfig+0x1ba>
 80038c8:	2302      	movs	r3, #2
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ce:	e03e      	b.n	800394e <UART_SetConfig+0x1ba>
 80038d0:	2304      	movs	r3, #4
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d6:	e03a      	b.n	800394e <UART_SetConfig+0x1ba>
 80038d8:	2308      	movs	r3, #8
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038de:	e036      	b.n	800394e <UART_SetConfig+0x1ba>
 80038e0:	2310      	movs	r3, #16
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e6:	e032      	b.n	800394e <UART_SetConfig+0x1ba>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6a      	ldr	r2, [pc, #424]	; (8003a98 <UART_SetConfig+0x304>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d12a      	bne.n	8003948 <UART_SetConfig+0x1b4>
 80038f2:	4b6b      	ldr	r3, [pc, #428]	; (8003aa0 <UART_SetConfig+0x30c>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003900:	d01a      	beq.n	8003938 <UART_SetConfig+0x1a4>
 8003902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003906:	d81b      	bhi.n	8003940 <UART_SetConfig+0x1ac>
 8003908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800390c:	d00c      	beq.n	8003928 <UART_SetConfig+0x194>
 800390e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003912:	d815      	bhi.n	8003940 <UART_SetConfig+0x1ac>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <UART_SetConfig+0x18c>
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391c:	d008      	beq.n	8003930 <UART_SetConfig+0x19c>
 800391e:	e00f      	b.n	8003940 <UART_SetConfig+0x1ac>
 8003920:	2300      	movs	r3, #0
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e012      	b.n	800394e <UART_SetConfig+0x1ba>
 8003928:	2302      	movs	r3, #2
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e00e      	b.n	800394e <UART_SetConfig+0x1ba>
 8003930:	2304      	movs	r3, #4
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e00a      	b.n	800394e <UART_SetConfig+0x1ba>
 8003938:	2308      	movs	r3, #8
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e006      	b.n	800394e <UART_SetConfig+0x1ba>
 8003940:	2310      	movs	r3, #16
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	e002      	b.n	800394e <UART_SetConfig+0x1ba>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a51      	ldr	r2, [pc, #324]	; (8003a98 <UART_SetConfig+0x304>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d17a      	bne.n	8003a4e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800395c:	2b08      	cmp	r3, #8
 800395e:	d824      	bhi.n	80039aa <UART_SetConfig+0x216>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <UART_SetConfig+0x1d4>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	0800398d 	.word	0x0800398d
 800396c:	080039ab 	.word	0x080039ab
 8003970:	08003995 	.word	0x08003995
 8003974:	080039ab 	.word	0x080039ab
 8003978:	0800399b 	.word	0x0800399b
 800397c:	080039ab 	.word	0x080039ab
 8003980:	080039ab 	.word	0x080039ab
 8003984:	080039ab 	.word	0x080039ab
 8003988:	080039a3 	.word	0x080039a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800398c:	f7ff fa9c 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8003990:	61f8      	str	r0, [r7, #28]
        break;
 8003992:	e010      	b.n	80039b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003994:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <UART_SetConfig+0x314>)
 8003996:	61fb      	str	r3, [r7, #28]
        break;
 8003998:	e00d      	b.n	80039b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399a:	f7ff f9fd 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 800399e:	61f8      	str	r0, [r7, #28]
        break;
 80039a0:	e009      	b.n	80039b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a6:	61fb      	str	r3, [r7, #28]
        break;
 80039a8:	e005      	b.n	80039b6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8107 	beq.w	8003bcc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d305      	bcc.n	80039da <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d903      	bls.n	80039e2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039e0:	e0f4      	b.n	8003bcc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2200      	movs	r2, #0
 80039e6:	461c      	mov	r4, r3
 80039e8:	4615      	mov	r5, r2
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	022b      	lsls	r3, r5, #8
 80039f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039f8:	0222      	lsls	r2, r4, #8
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	6849      	ldr	r1, [r1, #4]
 80039fe:	0849      	lsrs	r1, r1, #1
 8003a00:	2000      	movs	r0, #0
 8003a02:	4688      	mov	r8, r1
 8003a04:	4681      	mov	r9, r0
 8003a06:	eb12 0a08 	adds.w	sl, r2, r8
 8003a0a:	eb43 0b09 	adc.w	fp, r3, r9
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a1c:	4650      	mov	r0, sl
 8003a1e:	4659      	mov	r1, fp
 8003a20:	f7fc fc2e 	bl	8000280 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a32:	d308      	bcc.n	8003a46 <UART_SetConfig+0x2b2>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3a:	d204      	bcs.n	8003a46 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	60da      	str	r2, [r3, #12]
 8003a44:	e0c2      	b.n	8003bcc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a4c:	e0be      	b.n	8003bcc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a56:	d16a      	bne.n	8003b2e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003a58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d834      	bhi.n	8003aca <UART_SetConfig+0x336>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <UART_SetConfig+0x2d4>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003aad 	.word	0x08003aad
 8003a70:	08003ab5 	.word	0x08003ab5
 8003a74:	08003acb 	.word	0x08003acb
 8003a78:	08003abb 	.word	0x08003abb
 8003a7c:	08003acb 	.word	0x08003acb
 8003a80:	08003acb 	.word	0x08003acb
 8003a84:	08003acb 	.word	0x08003acb
 8003a88:	08003ac3 	.word	0x08003ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7ff fa1c 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8003a90:	61f8      	str	r0, [r7, #28]
        break;
 8003a92:	e020      	b.n	8003ad6 <UART_SetConfig+0x342>
 8003a94:	efff69f3 	.word	0xefff69f3
 8003a98:	40008000 	.word	0x40008000
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aac:	f7ff fa22 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003ab0:	61f8      	str	r0, [r7, #28]
        break;
 8003ab2:	e010      	b.n	8003ad6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <UART_SetConfig+0x454>)
 8003ab6:	61fb      	str	r3, [r7, #28]
        break;
 8003ab8:	e00d      	b.n	8003ad6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aba:	f7ff f96d 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8003abe:	61f8      	str	r0, [r7, #28]
        break;
 8003ac0:	e009      	b.n	8003ad6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac6:	61fb      	str	r3, [r7, #28]
        break;
 8003ac8:	e005      	b.n	8003ad6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d077      	beq.n	8003bcc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	005a      	lsls	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	441a      	add	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d916      	bls.n	8003b26 <UART_SetConfig+0x392>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d212      	bcs.n	8003b26 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f023 030f 	bic.w	r3, r3, #15
 8003b08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	8afb      	ldrh	r3, [r7, #22]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	8afa      	ldrh	r2, [r7, #22]
 8003b22:	60da      	str	r2, [r3, #12]
 8003b24:	e052      	b.n	8003bcc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b2c:	e04e      	b.n	8003bcc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d827      	bhi.n	8003b86 <UART_SetConfig+0x3f2>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x3a8>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b77 	.word	0x08003b77
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b87 	.word	0x08003b87
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b60:	f7ff f9b2 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8003b64:	61f8      	str	r0, [r7, #28]
        break;
 8003b66:	e014      	b.n	8003b92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7ff f9c4 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	61f8      	str	r0, [r7, #28]
        break;
 8003b6e:	e010      	b.n	8003b92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <UART_SetConfig+0x454>)
 8003b72:	61fb      	str	r3, [r7, #28]
        break;
 8003b74:	e00d      	b.n	8003b92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7ff f90f 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8003b7a:	61f8      	str	r0, [r7, #28]
        break;
 8003b7c:	e009      	b.n	8003b92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	61fb      	str	r3, [r7, #28]
        break;
 8003b84:	e005      	b.n	8003b92 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b90:	bf00      	nop
    }

    if (pclk != 0U)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d019      	beq.n	8003bcc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	085a      	lsrs	r2, r3, #1
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	d909      	bls.n	8003bc6 <UART_SetConfig+0x432>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d205      	bcs.n	8003bc6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	e002      	b.n	8003bcc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	00f42400 	.word	0x00f42400

08003bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cea:	d10a      	bne.n	8003d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d40:	f7fc ff94 	bl	8000c6c <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d10e      	bne.n	8003d72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f82d 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e023      	b.n	8003dba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d10e      	bne.n	8003d9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f817 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e00d      	b.n	8003dba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b09c      	sub	sp, #112	; 0x70
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	e0a5      	b.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dda:	f000 80a1 	beq.w	8003f20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dde:	f7fc ff45 	bl	8000c6c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d302      	bcc.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d13e      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e08:	667b      	str	r3, [r7, #100]	; 0x64
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e6      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e46:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e067      	b.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d04f      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d147      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e6      	bne.n	8003e9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	613b      	str	r3, [r7, #16]
   return(result);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eec:	623a      	str	r2, [r7, #32]
 8003eee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	69f9      	ldr	r1, [r7, #28]
 8003ef2:	6a3a      	ldr	r2, [r7, #32]
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e5      	bne.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e010      	b.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f43f af4a 	beq.w	8003dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3770      	adds	r7, #112	; 0x70
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <__errno>:
 8003f4c:	4b01      	ldr	r3, [pc, #4]	; (8003f54 <__errno+0x8>)
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c

08003f58 <__libc_init_array>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4d0d      	ldr	r5, [pc, #52]	; (8003f90 <__libc_init_array+0x38>)
 8003f5c:	4c0d      	ldr	r4, [pc, #52]	; (8003f94 <__libc_init_array+0x3c>)
 8003f5e:	1b64      	subs	r4, r4, r5
 8003f60:	10a4      	asrs	r4, r4, #2
 8003f62:	2600      	movs	r6, #0
 8003f64:	42a6      	cmp	r6, r4
 8003f66:	d109      	bne.n	8003f7c <__libc_init_array+0x24>
 8003f68:	4d0b      	ldr	r5, [pc, #44]	; (8003f98 <__libc_init_array+0x40>)
 8003f6a:	4c0c      	ldr	r4, [pc, #48]	; (8003f9c <__libc_init_array+0x44>)
 8003f6c:	f000 fc8e 	bl	800488c <_init>
 8003f70:	1b64      	subs	r4, r4, r5
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	2600      	movs	r6, #0
 8003f76:	42a6      	cmp	r6, r4
 8003f78:	d105      	bne.n	8003f86 <__libc_init_array+0x2e>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f80:	4798      	blx	r3
 8003f82:	3601      	adds	r6, #1
 8003f84:	e7ee      	b.n	8003f64 <__libc_init_array+0xc>
 8003f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8a:	4798      	blx	r3
 8003f8c:	3601      	adds	r6, #1
 8003f8e:	e7f2      	b.n	8003f76 <__libc_init_array+0x1e>
 8003f90:	08004934 	.word	0x08004934
 8003f94:	08004934 	.word	0x08004934
 8003f98:	08004934 	.word	0x08004934
 8003f9c:	08004938 	.word	0x08004938

08003fa0 <memset>:
 8003fa0:	4402      	add	r2, r0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d100      	bne.n	8003faa <memset+0xa>
 8003fa8:	4770      	bx	lr
 8003faa:	f803 1b01 	strb.w	r1, [r3], #1
 8003fae:	e7f9      	b.n	8003fa4 <memset+0x4>

08003fb0 <siprintf>:
 8003fb0:	b40e      	push	{r1, r2, r3}
 8003fb2:	b500      	push	{lr}
 8003fb4:	b09c      	sub	sp, #112	; 0x70
 8003fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb8:	9002      	str	r0, [sp, #8]
 8003fba:	9006      	str	r0, [sp, #24]
 8003fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fc0:	4809      	ldr	r0, [pc, #36]	; (8003fe8 <siprintf+0x38>)
 8003fc2:	9107      	str	r1, [sp, #28]
 8003fc4:	9104      	str	r1, [sp, #16]
 8003fc6:	4909      	ldr	r1, [pc, #36]	; (8003fec <siprintf+0x3c>)
 8003fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fcc:	9105      	str	r1, [sp, #20]
 8003fce:	6800      	ldr	r0, [r0, #0]
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	a902      	add	r1, sp, #8
 8003fd4:	f000 f868 	bl	80040a8 <_svfiprintf_r>
 8003fd8:	9b02      	ldr	r3, [sp, #8]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	b01c      	add	sp, #112	; 0x70
 8003fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fe4:	b003      	add	sp, #12
 8003fe6:	4770      	bx	lr
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	ffff0208 	.word	0xffff0208

08003ff0 <__ssputs_r>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	688e      	ldr	r6, [r1, #8]
 8003ff6:	429e      	cmp	r6, r3
 8003ff8:	4682      	mov	sl, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	4690      	mov	r8, r2
 8003ffe:	461f      	mov	r7, r3
 8004000:	d838      	bhi.n	8004074 <__ssputs_r+0x84>
 8004002:	898a      	ldrh	r2, [r1, #12]
 8004004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004008:	d032      	beq.n	8004070 <__ssputs_r+0x80>
 800400a:	6825      	ldr	r5, [r4, #0]
 800400c:	6909      	ldr	r1, [r1, #16]
 800400e:	eba5 0901 	sub.w	r9, r5, r1
 8004012:	6965      	ldr	r5, [r4, #20]
 8004014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800401c:	3301      	adds	r3, #1
 800401e:	444b      	add	r3, r9
 8004020:	106d      	asrs	r5, r5, #1
 8004022:	429d      	cmp	r5, r3
 8004024:	bf38      	it	cc
 8004026:	461d      	movcc	r5, r3
 8004028:	0553      	lsls	r3, r2, #21
 800402a:	d531      	bpl.n	8004090 <__ssputs_r+0xa0>
 800402c:	4629      	mov	r1, r5
 800402e:	f000 fb63 	bl	80046f8 <_malloc_r>
 8004032:	4606      	mov	r6, r0
 8004034:	b950      	cbnz	r0, 800404c <__ssputs_r+0x5c>
 8004036:	230c      	movs	r3, #12
 8004038:	f8ca 3000 	str.w	r3, [sl]
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404c:	6921      	ldr	r1, [r4, #16]
 800404e:	464a      	mov	r2, r9
 8004050:	f000 fabe 	bl	80045d0 <memcpy>
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800405a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405e:	81a3      	strh	r3, [r4, #12]
 8004060:	6126      	str	r6, [r4, #16]
 8004062:	6165      	str	r5, [r4, #20]
 8004064:	444e      	add	r6, r9
 8004066:	eba5 0509 	sub.w	r5, r5, r9
 800406a:	6026      	str	r6, [r4, #0]
 800406c:	60a5      	str	r5, [r4, #8]
 800406e:	463e      	mov	r6, r7
 8004070:	42be      	cmp	r6, r7
 8004072:	d900      	bls.n	8004076 <__ssputs_r+0x86>
 8004074:	463e      	mov	r6, r7
 8004076:	6820      	ldr	r0, [r4, #0]
 8004078:	4632      	mov	r2, r6
 800407a:	4641      	mov	r1, r8
 800407c:	f000 fab6 	bl	80045ec <memmove>
 8004080:	68a3      	ldr	r3, [r4, #8]
 8004082:	1b9b      	subs	r3, r3, r6
 8004084:	60a3      	str	r3, [r4, #8]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	4433      	add	r3, r6
 800408a:	6023      	str	r3, [r4, #0]
 800408c:	2000      	movs	r0, #0
 800408e:	e7db      	b.n	8004048 <__ssputs_r+0x58>
 8004090:	462a      	mov	r2, r5
 8004092:	f000 fba5 	bl	80047e0 <_realloc_r>
 8004096:	4606      	mov	r6, r0
 8004098:	2800      	cmp	r0, #0
 800409a:	d1e1      	bne.n	8004060 <__ssputs_r+0x70>
 800409c:	6921      	ldr	r1, [r4, #16]
 800409e:	4650      	mov	r0, sl
 80040a0:	f000 fabe 	bl	8004620 <_free_r>
 80040a4:	e7c7      	b.n	8004036 <__ssputs_r+0x46>
	...

080040a8 <_svfiprintf_r>:
 80040a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	4698      	mov	r8, r3
 80040ae:	898b      	ldrh	r3, [r1, #12]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	b09d      	sub	sp, #116	; 0x74
 80040b4:	4607      	mov	r7, r0
 80040b6:	460d      	mov	r5, r1
 80040b8:	4614      	mov	r4, r2
 80040ba:	d50e      	bpl.n	80040da <_svfiprintf_r+0x32>
 80040bc:	690b      	ldr	r3, [r1, #16]
 80040be:	b963      	cbnz	r3, 80040da <_svfiprintf_r+0x32>
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	f000 fb19 	bl	80046f8 <_malloc_r>
 80040c6:	6028      	str	r0, [r5, #0]
 80040c8:	6128      	str	r0, [r5, #16]
 80040ca:	b920      	cbnz	r0, 80040d6 <_svfiprintf_r+0x2e>
 80040cc:	230c      	movs	r3, #12
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d4:	e0d1      	b.n	800427a <_svfiprintf_r+0x1d2>
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	616b      	str	r3, [r5, #20]
 80040da:	2300      	movs	r3, #0
 80040dc:	9309      	str	r3, [sp, #36]	; 0x24
 80040de:	2320      	movs	r3, #32
 80040e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e8:	2330      	movs	r3, #48	; 0x30
 80040ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004294 <_svfiprintf_r+0x1ec>
 80040ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040f2:	f04f 0901 	mov.w	r9, #1
 80040f6:	4623      	mov	r3, r4
 80040f8:	469a      	mov	sl, r3
 80040fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040fe:	b10a      	cbz	r2, 8004104 <_svfiprintf_r+0x5c>
 8004100:	2a25      	cmp	r2, #37	; 0x25
 8004102:	d1f9      	bne.n	80040f8 <_svfiprintf_r+0x50>
 8004104:	ebba 0b04 	subs.w	fp, sl, r4
 8004108:	d00b      	beq.n	8004122 <_svfiprintf_r+0x7a>
 800410a:	465b      	mov	r3, fp
 800410c:	4622      	mov	r2, r4
 800410e:	4629      	mov	r1, r5
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff ff6d 	bl	8003ff0 <__ssputs_r>
 8004116:	3001      	adds	r0, #1
 8004118:	f000 80aa 	beq.w	8004270 <_svfiprintf_r+0x1c8>
 800411c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800411e:	445a      	add	r2, fp
 8004120:	9209      	str	r2, [sp, #36]	; 0x24
 8004122:	f89a 3000 	ldrb.w	r3, [sl]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a2 	beq.w	8004270 <_svfiprintf_r+0x1c8>
 800412c:	2300      	movs	r3, #0
 800412e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004136:	f10a 0a01 	add.w	sl, sl, #1
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	9307      	str	r3, [sp, #28]
 800413e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004142:	931a      	str	r3, [sp, #104]	; 0x68
 8004144:	4654      	mov	r4, sl
 8004146:	2205      	movs	r2, #5
 8004148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414c:	4851      	ldr	r0, [pc, #324]	; (8004294 <_svfiprintf_r+0x1ec>)
 800414e:	f7fc f847 	bl	80001e0 <memchr>
 8004152:	9a04      	ldr	r2, [sp, #16]
 8004154:	b9d8      	cbnz	r0, 800418e <_svfiprintf_r+0xe6>
 8004156:	06d0      	lsls	r0, r2, #27
 8004158:	bf44      	itt	mi
 800415a:	2320      	movmi	r3, #32
 800415c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004160:	0711      	lsls	r1, r2, #28
 8004162:	bf44      	itt	mi
 8004164:	232b      	movmi	r3, #43	; 0x2b
 8004166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416a:	f89a 3000 	ldrb.w	r3, [sl]
 800416e:	2b2a      	cmp	r3, #42	; 0x2a
 8004170:	d015      	beq.n	800419e <_svfiprintf_r+0xf6>
 8004172:	9a07      	ldr	r2, [sp, #28]
 8004174:	4654      	mov	r4, sl
 8004176:	2000      	movs	r0, #0
 8004178:	f04f 0c0a 	mov.w	ip, #10
 800417c:	4621      	mov	r1, r4
 800417e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004182:	3b30      	subs	r3, #48	; 0x30
 8004184:	2b09      	cmp	r3, #9
 8004186:	d94e      	bls.n	8004226 <_svfiprintf_r+0x17e>
 8004188:	b1b0      	cbz	r0, 80041b8 <_svfiprintf_r+0x110>
 800418a:	9207      	str	r2, [sp, #28]
 800418c:	e014      	b.n	80041b8 <_svfiprintf_r+0x110>
 800418e:	eba0 0308 	sub.w	r3, r0, r8
 8004192:	fa09 f303 	lsl.w	r3, r9, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	46a2      	mov	sl, r4
 800419c:	e7d2      	b.n	8004144 <_svfiprintf_r+0x9c>
 800419e:	9b03      	ldr	r3, [sp, #12]
 80041a0:	1d19      	adds	r1, r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	9103      	str	r1, [sp, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfbb      	ittet	lt
 80041aa:	425b      	neglt	r3, r3
 80041ac:	f042 0202 	orrlt.w	r2, r2, #2
 80041b0:	9307      	strge	r3, [sp, #28]
 80041b2:	9307      	strlt	r3, [sp, #28]
 80041b4:	bfb8      	it	lt
 80041b6:	9204      	strlt	r2, [sp, #16]
 80041b8:	7823      	ldrb	r3, [r4, #0]
 80041ba:	2b2e      	cmp	r3, #46	; 0x2e
 80041bc:	d10c      	bne.n	80041d8 <_svfiprintf_r+0x130>
 80041be:	7863      	ldrb	r3, [r4, #1]
 80041c0:	2b2a      	cmp	r3, #42	; 0x2a
 80041c2:	d135      	bne.n	8004230 <_svfiprintf_r+0x188>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	9203      	str	r2, [sp, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bfb8      	it	lt
 80041d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041d4:	3402      	adds	r4, #2
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042a4 <_svfiprintf_r+0x1fc>
 80041dc:	7821      	ldrb	r1, [r4, #0]
 80041de:	2203      	movs	r2, #3
 80041e0:	4650      	mov	r0, sl
 80041e2:	f7fb fffd 	bl	80001e0 <memchr>
 80041e6:	b140      	cbz	r0, 80041fa <_svfiprintf_r+0x152>
 80041e8:	2340      	movs	r3, #64	; 0x40
 80041ea:	eba0 000a 	sub.w	r0, r0, sl
 80041ee:	fa03 f000 	lsl.w	r0, r3, r0
 80041f2:	9b04      	ldr	r3, [sp, #16]
 80041f4:	4303      	orrs	r3, r0
 80041f6:	3401      	adds	r4, #1
 80041f8:	9304      	str	r3, [sp, #16]
 80041fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fe:	4826      	ldr	r0, [pc, #152]	; (8004298 <_svfiprintf_r+0x1f0>)
 8004200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004204:	2206      	movs	r2, #6
 8004206:	f7fb ffeb 	bl	80001e0 <memchr>
 800420a:	2800      	cmp	r0, #0
 800420c:	d038      	beq.n	8004280 <_svfiprintf_r+0x1d8>
 800420e:	4b23      	ldr	r3, [pc, #140]	; (800429c <_svfiprintf_r+0x1f4>)
 8004210:	bb1b      	cbnz	r3, 800425a <_svfiprintf_r+0x1b2>
 8004212:	9b03      	ldr	r3, [sp, #12]
 8004214:	3307      	adds	r3, #7
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	3308      	adds	r3, #8
 800421c:	9303      	str	r3, [sp, #12]
 800421e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004220:	4433      	add	r3, r6
 8004222:	9309      	str	r3, [sp, #36]	; 0x24
 8004224:	e767      	b.n	80040f6 <_svfiprintf_r+0x4e>
 8004226:	fb0c 3202 	mla	r2, ip, r2, r3
 800422a:	460c      	mov	r4, r1
 800422c:	2001      	movs	r0, #1
 800422e:	e7a5      	b.n	800417c <_svfiprintf_r+0xd4>
 8004230:	2300      	movs	r3, #0
 8004232:	3401      	adds	r4, #1
 8004234:	9305      	str	r3, [sp, #20]
 8004236:	4619      	mov	r1, r3
 8004238:	f04f 0c0a 	mov.w	ip, #10
 800423c:	4620      	mov	r0, r4
 800423e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004242:	3a30      	subs	r2, #48	; 0x30
 8004244:	2a09      	cmp	r2, #9
 8004246:	d903      	bls.n	8004250 <_svfiprintf_r+0x1a8>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0c5      	beq.n	80041d8 <_svfiprintf_r+0x130>
 800424c:	9105      	str	r1, [sp, #20]
 800424e:	e7c3      	b.n	80041d8 <_svfiprintf_r+0x130>
 8004250:	fb0c 2101 	mla	r1, ip, r1, r2
 8004254:	4604      	mov	r4, r0
 8004256:	2301      	movs	r3, #1
 8004258:	e7f0      	b.n	800423c <_svfiprintf_r+0x194>
 800425a:	ab03      	add	r3, sp, #12
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	462a      	mov	r2, r5
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <_svfiprintf_r+0x1f8>)
 8004262:	a904      	add	r1, sp, #16
 8004264:	4638      	mov	r0, r7
 8004266:	f3af 8000 	nop.w
 800426a:	1c42      	adds	r2, r0, #1
 800426c:	4606      	mov	r6, r0
 800426e:	d1d6      	bne.n	800421e <_svfiprintf_r+0x176>
 8004270:	89ab      	ldrh	r3, [r5, #12]
 8004272:	065b      	lsls	r3, r3, #25
 8004274:	f53f af2c 	bmi.w	80040d0 <_svfiprintf_r+0x28>
 8004278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800427a:	b01d      	add	sp, #116	; 0x74
 800427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004280:	ab03      	add	r3, sp, #12
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	462a      	mov	r2, r5
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <_svfiprintf_r+0x1f8>)
 8004288:	a904      	add	r1, sp, #16
 800428a:	4638      	mov	r0, r7
 800428c:	f000 f87a 	bl	8004384 <_printf_i>
 8004290:	e7eb      	b.n	800426a <_svfiprintf_r+0x1c2>
 8004292:	bf00      	nop
 8004294:	080048f8 	.word	0x080048f8
 8004298:	08004902 	.word	0x08004902
 800429c:	00000000 	.word	0x00000000
 80042a0:	08003ff1 	.word	0x08003ff1
 80042a4:	080048fe 	.word	0x080048fe

080042a8 <_printf_common>:
 80042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	4616      	mov	r6, r2
 80042ae:	4699      	mov	r9, r3
 80042b0:	688a      	ldr	r2, [r1, #8]
 80042b2:	690b      	ldr	r3, [r1, #16]
 80042b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bfb8      	it	lt
 80042bc:	4613      	movlt	r3, r2
 80042be:	6033      	str	r3, [r6, #0]
 80042c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042c4:	4607      	mov	r7, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	b10a      	cbz	r2, 80042ce <_printf_common+0x26>
 80042ca:	3301      	adds	r3, #1
 80042cc:	6033      	str	r3, [r6, #0]
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	0699      	lsls	r1, r3, #26
 80042d2:	bf42      	ittt	mi
 80042d4:	6833      	ldrmi	r3, [r6, #0]
 80042d6:	3302      	addmi	r3, #2
 80042d8:	6033      	strmi	r3, [r6, #0]
 80042da:	6825      	ldr	r5, [r4, #0]
 80042dc:	f015 0506 	ands.w	r5, r5, #6
 80042e0:	d106      	bne.n	80042f0 <_printf_common+0x48>
 80042e2:	f104 0a19 	add.w	sl, r4, #25
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	6832      	ldr	r2, [r6, #0]
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	42ab      	cmp	r3, r5
 80042ee:	dc26      	bgt.n	800433e <_printf_common+0x96>
 80042f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042f4:	1e13      	subs	r3, r2, #0
 80042f6:	6822      	ldr	r2, [r4, #0]
 80042f8:	bf18      	it	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	0692      	lsls	r2, r2, #26
 80042fe:	d42b      	bmi.n	8004358 <_printf_common+0xb0>
 8004300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004304:	4649      	mov	r1, r9
 8004306:	4638      	mov	r0, r7
 8004308:	47c0      	blx	r8
 800430a:	3001      	adds	r0, #1
 800430c:	d01e      	beq.n	800434c <_printf_common+0xa4>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	68e5      	ldr	r5, [r4, #12]
 8004312:	6832      	ldr	r2, [r6, #0]
 8004314:	f003 0306 	and.w	r3, r3, #6
 8004318:	2b04      	cmp	r3, #4
 800431a:	bf08      	it	eq
 800431c:	1aad      	subeq	r5, r5, r2
 800431e:	68a3      	ldr	r3, [r4, #8]
 8004320:	6922      	ldr	r2, [r4, #16]
 8004322:	bf0c      	ite	eq
 8004324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004328:	2500      	movne	r5, #0
 800432a:	4293      	cmp	r3, r2
 800432c:	bfc4      	itt	gt
 800432e:	1a9b      	subgt	r3, r3, r2
 8004330:	18ed      	addgt	r5, r5, r3
 8004332:	2600      	movs	r6, #0
 8004334:	341a      	adds	r4, #26
 8004336:	42b5      	cmp	r5, r6
 8004338:	d11a      	bne.n	8004370 <_printf_common+0xc8>
 800433a:	2000      	movs	r0, #0
 800433c:	e008      	b.n	8004350 <_printf_common+0xa8>
 800433e:	2301      	movs	r3, #1
 8004340:	4652      	mov	r2, sl
 8004342:	4649      	mov	r1, r9
 8004344:	4638      	mov	r0, r7
 8004346:	47c0      	blx	r8
 8004348:	3001      	adds	r0, #1
 800434a:	d103      	bne.n	8004354 <_printf_common+0xac>
 800434c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004354:	3501      	adds	r5, #1
 8004356:	e7c6      	b.n	80042e6 <_printf_common+0x3e>
 8004358:	18e1      	adds	r1, r4, r3
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	2030      	movs	r0, #48	; 0x30
 800435e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004362:	4422      	add	r2, r4
 8004364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800436c:	3302      	adds	r3, #2
 800436e:	e7c7      	b.n	8004300 <_printf_common+0x58>
 8004370:	2301      	movs	r3, #1
 8004372:	4622      	mov	r2, r4
 8004374:	4649      	mov	r1, r9
 8004376:	4638      	mov	r0, r7
 8004378:	47c0      	blx	r8
 800437a:	3001      	adds	r0, #1
 800437c:	d0e6      	beq.n	800434c <_printf_common+0xa4>
 800437e:	3601      	adds	r6, #1
 8004380:	e7d9      	b.n	8004336 <_printf_common+0x8e>
	...

08004384 <_printf_i>:
 8004384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004388:	7e0f      	ldrb	r7, [r1, #24]
 800438a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800438c:	2f78      	cmp	r7, #120	; 0x78
 800438e:	4691      	mov	r9, r2
 8004390:	4680      	mov	r8, r0
 8004392:	460c      	mov	r4, r1
 8004394:	469a      	mov	sl, r3
 8004396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800439a:	d807      	bhi.n	80043ac <_printf_i+0x28>
 800439c:	2f62      	cmp	r7, #98	; 0x62
 800439e:	d80a      	bhi.n	80043b6 <_printf_i+0x32>
 80043a0:	2f00      	cmp	r7, #0
 80043a2:	f000 80d8 	beq.w	8004556 <_printf_i+0x1d2>
 80043a6:	2f58      	cmp	r7, #88	; 0x58
 80043a8:	f000 80a3 	beq.w	80044f2 <_printf_i+0x16e>
 80043ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043b4:	e03a      	b.n	800442c <_printf_i+0xa8>
 80043b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ba:	2b15      	cmp	r3, #21
 80043bc:	d8f6      	bhi.n	80043ac <_printf_i+0x28>
 80043be:	a101      	add	r1, pc, #4	; (adr r1, 80043c4 <_printf_i+0x40>)
 80043c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043c4:	0800441d 	.word	0x0800441d
 80043c8:	08004431 	.word	0x08004431
 80043cc:	080043ad 	.word	0x080043ad
 80043d0:	080043ad 	.word	0x080043ad
 80043d4:	080043ad 	.word	0x080043ad
 80043d8:	080043ad 	.word	0x080043ad
 80043dc:	08004431 	.word	0x08004431
 80043e0:	080043ad 	.word	0x080043ad
 80043e4:	080043ad 	.word	0x080043ad
 80043e8:	080043ad 	.word	0x080043ad
 80043ec:	080043ad 	.word	0x080043ad
 80043f0:	0800453d 	.word	0x0800453d
 80043f4:	08004461 	.word	0x08004461
 80043f8:	0800451f 	.word	0x0800451f
 80043fc:	080043ad 	.word	0x080043ad
 8004400:	080043ad 	.word	0x080043ad
 8004404:	0800455f 	.word	0x0800455f
 8004408:	080043ad 	.word	0x080043ad
 800440c:	08004461 	.word	0x08004461
 8004410:	080043ad 	.word	0x080043ad
 8004414:	080043ad 	.word	0x080043ad
 8004418:	08004527 	.word	0x08004527
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	602a      	str	r2, [r5, #0]
 8004424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800442c:	2301      	movs	r3, #1
 800442e:	e0a3      	b.n	8004578 <_printf_i+0x1f4>
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	6829      	ldr	r1, [r5, #0]
 8004434:	0606      	lsls	r6, r0, #24
 8004436:	f101 0304 	add.w	r3, r1, #4
 800443a:	d50a      	bpl.n	8004452 <_printf_i+0xce>
 800443c:	680e      	ldr	r6, [r1, #0]
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	2e00      	cmp	r6, #0
 8004442:	da03      	bge.n	800444c <_printf_i+0xc8>
 8004444:	232d      	movs	r3, #45	; 0x2d
 8004446:	4276      	negs	r6, r6
 8004448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800444c:	485e      	ldr	r0, [pc, #376]	; (80045c8 <_printf_i+0x244>)
 800444e:	230a      	movs	r3, #10
 8004450:	e019      	b.n	8004486 <_printf_i+0x102>
 8004452:	680e      	ldr	r6, [r1, #0]
 8004454:	602b      	str	r3, [r5, #0]
 8004456:	f010 0f40 	tst.w	r0, #64	; 0x40
 800445a:	bf18      	it	ne
 800445c:	b236      	sxthne	r6, r6
 800445e:	e7ef      	b.n	8004440 <_printf_i+0xbc>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	1d19      	adds	r1, r3, #4
 8004466:	6029      	str	r1, [r5, #0]
 8004468:	0601      	lsls	r1, r0, #24
 800446a:	d501      	bpl.n	8004470 <_printf_i+0xec>
 800446c:	681e      	ldr	r6, [r3, #0]
 800446e:	e002      	b.n	8004476 <_printf_i+0xf2>
 8004470:	0646      	lsls	r6, r0, #25
 8004472:	d5fb      	bpl.n	800446c <_printf_i+0xe8>
 8004474:	881e      	ldrh	r6, [r3, #0]
 8004476:	4854      	ldr	r0, [pc, #336]	; (80045c8 <_printf_i+0x244>)
 8004478:	2f6f      	cmp	r7, #111	; 0x6f
 800447a:	bf0c      	ite	eq
 800447c:	2308      	moveq	r3, #8
 800447e:	230a      	movne	r3, #10
 8004480:	2100      	movs	r1, #0
 8004482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004486:	6865      	ldr	r5, [r4, #4]
 8004488:	60a5      	str	r5, [r4, #8]
 800448a:	2d00      	cmp	r5, #0
 800448c:	bfa2      	ittt	ge
 800448e:	6821      	ldrge	r1, [r4, #0]
 8004490:	f021 0104 	bicge.w	r1, r1, #4
 8004494:	6021      	strge	r1, [r4, #0]
 8004496:	b90e      	cbnz	r6, 800449c <_printf_i+0x118>
 8004498:	2d00      	cmp	r5, #0
 800449a:	d04d      	beq.n	8004538 <_printf_i+0x1b4>
 800449c:	4615      	mov	r5, r2
 800449e:	fbb6 f1f3 	udiv	r1, r6, r3
 80044a2:	fb03 6711 	mls	r7, r3, r1, r6
 80044a6:	5dc7      	ldrb	r7, [r0, r7]
 80044a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ac:	4637      	mov	r7, r6
 80044ae:	42bb      	cmp	r3, r7
 80044b0:	460e      	mov	r6, r1
 80044b2:	d9f4      	bls.n	800449e <_printf_i+0x11a>
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d10b      	bne.n	80044d0 <_printf_i+0x14c>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	07de      	lsls	r6, r3, #31
 80044bc:	d508      	bpl.n	80044d0 <_printf_i+0x14c>
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	6861      	ldr	r1, [r4, #4]
 80044c2:	4299      	cmp	r1, r3
 80044c4:	bfde      	ittt	le
 80044c6:	2330      	movle	r3, #48	; 0x30
 80044c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044d0:	1b52      	subs	r2, r2, r5
 80044d2:	6122      	str	r2, [r4, #16]
 80044d4:	f8cd a000 	str.w	sl, [sp]
 80044d8:	464b      	mov	r3, r9
 80044da:	aa03      	add	r2, sp, #12
 80044dc:	4621      	mov	r1, r4
 80044de:	4640      	mov	r0, r8
 80044e0:	f7ff fee2 	bl	80042a8 <_printf_common>
 80044e4:	3001      	adds	r0, #1
 80044e6:	d14c      	bne.n	8004582 <_printf_i+0x1fe>
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ec:	b004      	add	sp, #16
 80044ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f2:	4835      	ldr	r0, [pc, #212]	; (80045c8 <_printf_i+0x244>)
 80044f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044f8:	6829      	ldr	r1, [r5, #0]
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004500:	6029      	str	r1, [r5, #0]
 8004502:	061d      	lsls	r5, r3, #24
 8004504:	d514      	bpl.n	8004530 <_printf_i+0x1ac>
 8004506:	07df      	lsls	r7, r3, #31
 8004508:	bf44      	itt	mi
 800450a:	f043 0320 	orrmi.w	r3, r3, #32
 800450e:	6023      	strmi	r3, [r4, #0]
 8004510:	b91e      	cbnz	r6, 800451a <_printf_i+0x196>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	f023 0320 	bic.w	r3, r3, #32
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	2310      	movs	r3, #16
 800451c:	e7b0      	b.n	8004480 <_printf_i+0xfc>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f043 0320 	orr.w	r3, r3, #32
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	2378      	movs	r3, #120	; 0x78
 8004528:	4828      	ldr	r0, [pc, #160]	; (80045cc <_printf_i+0x248>)
 800452a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800452e:	e7e3      	b.n	80044f8 <_printf_i+0x174>
 8004530:	0659      	lsls	r1, r3, #25
 8004532:	bf48      	it	mi
 8004534:	b2b6      	uxthmi	r6, r6
 8004536:	e7e6      	b.n	8004506 <_printf_i+0x182>
 8004538:	4615      	mov	r5, r2
 800453a:	e7bb      	b.n	80044b4 <_printf_i+0x130>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	6826      	ldr	r6, [r4, #0]
 8004540:	6961      	ldr	r1, [r4, #20]
 8004542:	1d18      	adds	r0, r3, #4
 8004544:	6028      	str	r0, [r5, #0]
 8004546:	0635      	lsls	r5, r6, #24
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	d501      	bpl.n	8004550 <_printf_i+0x1cc>
 800454c:	6019      	str	r1, [r3, #0]
 800454e:	e002      	b.n	8004556 <_printf_i+0x1d2>
 8004550:	0670      	lsls	r0, r6, #25
 8004552:	d5fb      	bpl.n	800454c <_printf_i+0x1c8>
 8004554:	8019      	strh	r1, [r3, #0]
 8004556:	2300      	movs	r3, #0
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	4615      	mov	r5, r2
 800455c:	e7ba      	b.n	80044d4 <_printf_i+0x150>
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	2100      	movs	r1, #0
 800456a:	4628      	mov	r0, r5
 800456c:	f7fb fe38 	bl	80001e0 <memchr>
 8004570:	b108      	cbz	r0, 8004576 <_printf_i+0x1f2>
 8004572:	1b40      	subs	r0, r0, r5
 8004574:	6060      	str	r0, [r4, #4]
 8004576:	6863      	ldr	r3, [r4, #4]
 8004578:	6123      	str	r3, [r4, #16]
 800457a:	2300      	movs	r3, #0
 800457c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004580:	e7a8      	b.n	80044d4 <_printf_i+0x150>
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	462a      	mov	r2, r5
 8004586:	4649      	mov	r1, r9
 8004588:	4640      	mov	r0, r8
 800458a:	47d0      	blx	sl
 800458c:	3001      	adds	r0, #1
 800458e:	d0ab      	beq.n	80044e8 <_printf_i+0x164>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	079b      	lsls	r3, r3, #30
 8004594:	d413      	bmi.n	80045be <_printf_i+0x23a>
 8004596:	68e0      	ldr	r0, [r4, #12]
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	4298      	cmp	r0, r3
 800459c:	bfb8      	it	lt
 800459e:	4618      	movlt	r0, r3
 80045a0:	e7a4      	b.n	80044ec <_printf_i+0x168>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4632      	mov	r2, r6
 80045a6:	4649      	mov	r1, r9
 80045a8:	4640      	mov	r0, r8
 80045aa:	47d0      	blx	sl
 80045ac:	3001      	adds	r0, #1
 80045ae:	d09b      	beq.n	80044e8 <_printf_i+0x164>
 80045b0:	3501      	adds	r5, #1
 80045b2:	68e3      	ldr	r3, [r4, #12]
 80045b4:	9903      	ldr	r1, [sp, #12]
 80045b6:	1a5b      	subs	r3, r3, r1
 80045b8:	42ab      	cmp	r3, r5
 80045ba:	dcf2      	bgt.n	80045a2 <_printf_i+0x21e>
 80045bc:	e7eb      	b.n	8004596 <_printf_i+0x212>
 80045be:	2500      	movs	r5, #0
 80045c0:	f104 0619 	add.w	r6, r4, #25
 80045c4:	e7f5      	b.n	80045b2 <_printf_i+0x22e>
 80045c6:	bf00      	nop
 80045c8:	08004909 	.word	0x08004909
 80045cc:	0800491a 	.word	0x0800491a

080045d0 <memcpy>:
 80045d0:	440a      	add	r2, r1
 80045d2:	4291      	cmp	r1, r2
 80045d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80045d8:	d100      	bne.n	80045dc <memcpy+0xc>
 80045da:	4770      	bx	lr
 80045dc:	b510      	push	{r4, lr}
 80045de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045e6:	4291      	cmp	r1, r2
 80045e8:	d1f9      	bne.n	80045de <memcpy+0xe>
 80045ea:	bd10      	pop	{r4, pc}

080045ec <memmove>:
 80045ec:	4288      	cmp	r0, r1
 80045ee:	b510      	push	{r4, lr}
 80045f0:	eb01 0402 	add.w	r4, r1, r2
 80045f4:	d902      	bls.n	80045fc <memmove+0x10>
 80045f6:	4284      	cmp	r4, r0
 80045f8:	4623      	mov	r3, r4
 80045fa:	d807      	bhi.n	800460c <memmove+0x20>
 80045fc:	1e43      	subs	r3, r0, #1
 80045fe:	42a1      	cmp	r1, r4
 8004600:	d008      	beq.n	8004614 <memmove+0x28>
 8004602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800460a:	e7f8      	b.n	80045fe <memmove+0x12>
 800460c:	4402      	add	r2, r0
 800460e:	4601      	mov	r1, r0
 8004610:	428a      	cmp	r2, r1
 8004612:	d100      	bne.n	8004616 <memmove+0x2a>
 8004614:	bd10      	pop	{r4, pc}
 8004616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800461a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800461e:	e7f7      	b.n	8004610 <memmove+0x24>

08004620 <_free_r>:
 8004620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004622:	2900      	cmp	r1, #0
 8004624:	d044      	beq.n	80046b0 <_free_r+0x90>
 8004626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800462a:	9001      	str	r0, [sp, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f1a1 0404 	sub.w	r4, r1, #4
 8004632:	bfb8      	it	lt
 8004634:	18e4      	addlt	r4, r4, r3
 8004636:	f000 f913 	bl	8004860 <__malloc_lock>
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <_free_r+0x94>)
 800463c:	9801      	ldr	r0, [sp, #4]
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	b933      	cbnz	r3, 8004650 <_free_r+0x30>
 8004642:	6063      	str	r3, [r4, #4]
 8004644:	6014      	str	r4, [r2, #0]
 8004646:	b003      	add	sp, #12
 8004648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800464c:	f000 b90e 	b.w	800486c <__malloc_unlock>
 8004650:	42a3      	cmp	r3, r4
 8004652:	d908      	bls.n	8004666 <_free_r+0x46>
 8004654:	6825      	ldr	r5, [r4, #0]
 8004656:	1961      	adds	r1, r4, r5
 8004658:	428b      	cmp	r3, r1
 800465a:	bf01      	itttt	eq
 800465c:	6819      	ldreq	r1, [r3, #0]
 800465e:	685b      	ldreq	r3, [r3, #4]
 8004660:	1949      	addeq	r1, r1, r5
 8004662:	6021      	streq	r1, [r4, #0]
 8004664:	e7ed      	b.n	8004642 <_free_r+0x22>
 8004666:	461a      	mov	r2, r3
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	b10b      	cbz	r3, 8004670 <_free_r+0x50>
 800466c:	42a3      	cmp	r3, r4
 800466e:	d9fa      	bls.n	8004666 <_free_r+0x46>
 8004670:	6811      	ldr	r1, [r2, #0]
 8004672:	1855      	adds	r5, r2, r1
 8004674:	42a5      	cmp	r5, r4
 8004676:	d10b      	bne.n	8004690 <_free_r+0x70>
 8004678:	6824      	ldr	r4, [r4, #0]
 800467a:	4421      	add	r1, r4
 800467c:	1854      	adds	r4, r2, r1
 800467e:	42a3      	cmp	r3, r4
 8004680:	6011      	str	r1, [r2, #0]
 8004682:	d1e0      	bne.n	8004646 <_free_r+0x26>
 8004684:	681c      	ldr	r4, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	6053      	str	r3, [r2, #4]
 800468a:	4421      	add	r1, r4
 800468c:	6011      	str	r1, [r2, #0]
 800468e:	e7da      	b.n	8004646 <_free_r+0x26>
 8004690:	d902      	bls.n	8004698 <_free_r+0x78>
 8004692:	230c      	movs	r3, #12
 8004694:	6003      	str	r3, [r0, #0]
 8004696:	e7d6      	b.n	8004646 <_free_r+0x26>
 8004698:	6825      	ldr	r5, [r4, #0]
 800469a:	1961      	adds	r1, r4, r5
 800469c:	428b      	cmp	r3, r1
 800469e:	bf04      	itt	eq
 80046a0:	6819      	ldreq	r1, [r3, #0]
 80046a2:	685b      	ldreq	r3, [r3, #4]
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	bf04      	itt	eq
 80046a8:	1949      	addeq	r1, r1, r5
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	6054      	str	r4, [r2, #4]
 80046ae:	e7ca      	b.n	8004646 <_free_r+0x26>
 80046b0:	b003      	add	sp, #12
 80046b2:	bd30      	pop	{r4, r5, pc}
 80046b4:	2000017c 	.word	0x2000017c

080046b8 <sbrk_aligned>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4e0e      	ldr	r6, [pc, #56]	; (80046f4 <sbrk_aligned+0x3c>)
 80046bc:	460c      	mov	r4, r1
 80046be:	6831      	ldr	r1, [r6, #0]
 80046c0:	4605      	mov	r5, r0
 80046c2:	b911      	cbnz	r1, 80046ca <sbrk_aligned+0x12>
 80046c4:	f000 f8bc 	bl	8004840 <_sbrk_r>
 80046c8:	6030      	str	r0, [r6, #0]
 80046ca:	4621      	mov	r1, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	f000 f8b7 	bl	8004840 <_sbrk_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d00a      	beq.n	80046ec <sbrk_aligned+0x34>
 80046d6:	1cc4      	adds	r4, r0, #3
 80046d8:	f024 0403 	bic.w	r4, r4, #3
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d007      	beq.n	80046f0 <sbrk_aligned+0x38>
 80046e0:	1a21      	subs	r1, r4, r0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 f8ac 	bl	8004840 <_sbrk_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d101      	bne.n	80046f0 <sbrk_aligned+0x38>
 80046ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046f0:	4620      	mov	r0, r4
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	20000180 	.word	0x20000180

080046f8 <_malloc_r>:
 80046f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	1ccd      	adds	r5, r1, #3
 80046fe:	f025 0503 	bic.w	r5, r5, #3
 8004702:	3508      	adds	r5, #8
 8004704:	2d0c      	cmp	r5, #12
 8004706:	bf38      	it	cc
 8004708:	250c      	movcc	r5, #12
 800470a:	2d00      	cmp	r5, #0
 800470c:	4607      	mov	r7, r0
 800470e:	db01      	blt.n	8004714 <_malloc_r+0x1c>
 8004710:	42a9      	cmp	r1, r5
 8004712:	d905      	bls.n	8004720 <_malloc_r+0x28>
 8004714:	230c      	movs	r3, #12
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	2600      	movs	r6, #0
 800471a:	4630      	mov	r0, r6
 800471c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004720:	4e2e      	ldr	r6, [pc, #184]	; (80047dc <_malloc_r+0xe4>)
 8004722:	f000 f89d 	bl	8004860 <__malloc_lock>
 8004726:	6833      	ldr	r3, [r6, #0]
 8004728:	461c      	mov	r4, r3
 800472a:	bb34      	cbnz	r4, 800477a <_malloc_r+0x82>
 800472c:	4629      	mov	r1, r5
 800472e:	4638      	mov	r0, r7
 8004730:	f7ff ffc2 	bl	80046b8 <sbrk_aligned>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	4604      	mov	r4, r0
 8004738:	d14d      	bne.n	80047d6 <_malloc_r+0xde>
 800473a:	6834      	ldr	r4, [r6, #0]
 800473c:	4626      	mov	r6, r4
 800473e:	2e00      	cmp	r6, #0
 8004740:	d140      	bne.n	80047c4 <_malloc_r+0xcc>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	4631      	mov	r1, r6
 8004746:	4638      	mov	r0, r7
 8004748:	eb04 0803 	add.w	r8, r4, r3
 800474c:	f000 f878 	bl	8004840 <_sbrk_r>
 8004750:	4580      	cmp	r8, r0
 8004752:	d13a      	bne.n	80047ca <_malloc_r+0xd2>
 8004754:	6821      	ldr	r1, [r4, #0]
 8004756:	3503      	adds	r5, #3
 8004758:	1a6d      	subs	r5, r5, r1
 800475a:	f025 0503 	bic.w	r5, r5, #3
 800475e:	3508      	adds	r5, #8
 8004760:	2d0c      	cmp	r5, #12
 8004762:	bf38      	it	cc
 8004764:	250c      	movcc	r5, #12
 8004766:	4629      	mov	r1, r5
 8004768:	4638      	mov	r0, r7
 800476a:	f7ff ffa5 	bl	80046b8 <sbrk_aligned>
 800476e:	3001      	adds	r0, #1
 8004770:	d02b      	beq.n	80047ca <_malloc_r+0xd2>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	442b      	add	r3, r5
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	e00e      	b.n	8004798 <_malloc_r+0xa0>
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	1b52      	subs	r2, r2, r5
 800477e:	d41e      	bmi.n	80047be <_malloc_r+0xc6>
 8004780:	2a0b      	cmp	r2, #11
 8004782:	d916      	bls.n	80047b2 <_malloc_r+0xba>
 8004784:	1961      	adds	r1, r4, r5
 8004786:	42a3      	cmp	r3, r4
 8004788:	6025      	str	r5, [r4, #0]
 800478a:	bf18      	it	ne
 800478c:	6059      	strne	r1, [r3, #4]
 800478e:	6863      	ldr	r3, [r4, #4]
 8004790:	bf08      	it	eq
 8004792:	6031      	streq	r1, [r6, #0]
 8004794:	5162      	str	r2, [r4, r5]
 8004796:	604b      	str	r3, [r1, #4]
 8004798:	4638      	mov	r0, r7
 800479a:	f104 060b 	add.w	r6, r4, #11
 800479e:	f000 f865 	bl	800486c <__malloc_unlock>
 80047a2:	f026 0607 	bic.w	r6, r6, #7
 80047a6:	1d23      	adds	r3, r4, #4
 80047a8:	1af2      	subs	r2, r6, r3
 80047aa:	d0b6      	beq.n	800471a <_malloc_r+0x22>
 80047ac:	1b9b      	subs	r3, r3, r6
 80047ae:	50a3      	str	r3, [r4, r2]
 80047b0:	e7b3      	b.n	800471a <_malloc_r+0x22>
 80047b2:	6862      	ldr	r2, [r4, #4]
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	bf0c      	ite	eq
 80047b8:	6032      	streq	r2, [r6, #0]
 80047ba:	605a      	strne	r2, [r3, #4]
 80047bc:	e7ec      	b.n	8004798 <_malloc_r+0xa0>
 80047be:	4623      	mov	r3, r4
 80047c0:	6864      	ldr	r4, [r4, #4]
 80047c2:	e7b2      	b.n	800472a <_malloc_r+0x32>
 80047c4:	4634      	mov	r4, r6
 80047c6:	6876      	ldr	r6, [r6, #4]
 80047c8:	e7b9      	b.n	800473e <_malloc_r+0x46>
 80047ca:	230c      	movs	r3, #12
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4638      	mov	r0, r7
 80047d0:	f000 f84c 	bl	800486c <__malloc_unlock>
 80047d4:	e7a1      	b.n	800471a <_malloc_r+0x22>
 80047d6:	6025      	str	r5, [r4, #0]
 80047d8:	e7de      	b.n	8004798 <_malloc_r+0xa0>
 80047da:	bf00      	nop
 80047dc:	2000017c 	.word	0x2000017c

080047e0 <_realloc_r>:
 80047e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e4:	4680      	mov	r8, r0
 80047e6:	4614      	mov	r4, r2
 80047e8:	460e      	mov	r6, r1
 80047ea:	b921      	cbnz	r1, 80047f6 <_realloc_r+0x16>
 80047ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047f0:	4611      	mov	r1, r2
 80047f2:	f7ff bf81 	b.w	80046f8 <_malloc_r>
 80047f6:	b92a      	cbnz	r2, 8004804 <_realloc_r+0x24>
 80047f8:	f7ff ff12 	bl	8004620 <_free_r>
 80047fc:	4625      	mov	r5, r4
 80047fe:	4628      	mov	r0, r5
 8004800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004804:	f000 f838 	bl	8004878 <_malloc_usable_size_r>
 8004808:	4284      	cmp	r4, r0
 800480a:	4607      	mov	r7, r0
 800480c:	d802      	bhi.n	8004814 <_realloc_r+0x34>
 800480e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004812:	d812      	bhi.n	800483a <_realloc_r+0x5a>
 8004814:	4621      	mov	r1, r4
 8004816:	4640      	mov	r0, r8
 8004818:	f7ff ff6e 	bl	80046f8 <_malloc_r>
 800481c:	4605      	mov	r5, r0
 800481e:	2800      	cmp	r0, #0
 8004820:	d0ed      	beq.n	80047fe <_realloc_r+0x1e>
 8004822:	42bc      	cmp	r4, r7
 8004824:	4622      	mov	r2, r4
 8004826:	4631      	mov	r1, r6
 8004828:	bf28      	it	cs
 800482a:	463a      	movcs	r2, r7
 800482c:	f7ff fed0 	bl	80045d0 <memcpy>
 8004830:	4631      	mov	r1, r6
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fef4 	bl	8004620 <_free_r>
 8004838:	e7e1      	b.n	80047fe <_realloc_r+0x1e>
 800483a:	4635      	mov	r5, r6
 800483c:	e7df      	b.n	80047fe <_realloc_r+0x1e>
	...

08004840 <_sbrk_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4d06      	ldr	r5, [pc, #24]	; (800485c <_sbrk_r+0x1c>)
 8004844:	2300      	movs	r3, #0
 8004846:	4604      	mov	r4, r0
 8004848:	4608      	mov	r0, r1
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	f7fc f934 	bl	8000ab8 <_sbrk>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d102      	bne.n	800485a <_sbrk_r+0x1a>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	b103      	cbz	r3, 800485a <_sbrk_r+0x1a>
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	20000184 	.word	0x20000184

08004860 <__malloc_lock>:
 8004860:	4801      	ldr	r0, [pc, #4]	; (8004868 <__malloc_lock+0x8>)
 8004862:	f000 b811 	b.w	8004888 <__retarget_lock_acquire_recursive>
 8004866:	bf00      	nop
 8004868:	20000188 	.word	0x20000188

0800486c <__malloc_unlock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_unlock+0x8>)
 800486e:	f000 b80c 	b.w	800488a <__retarget_lock_release_recursive>
 8004872:	bf00      	nop
 8004874:	20000188 	.word	0x20000188

08004878 <_malloc_usable_size_r>:
 8004878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800487c:	1f18      	subs	r0, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfbc      	itt	lt
 8004882:	580b      	ldrlt	r3, [r1, r0]
 8004884:	18c0      	addlt	r0, r0, r3
 8004886:	4770      	bx	lr

08004888 <__retarget_lock_acquire_recursive>:
 8004888:	4770      	bx	lr

0800488a <__retarget_lock_release_recursive>:
 800488a:	4770      	bx	lr

0800488c <_init>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr

08004898 <_fini>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr
